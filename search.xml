<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2019/07/16/test/"/>
      <url>/2019/07/16/test/</url>
      
        <content type="html"><![CDATA[<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><blockquote><p>   简单测试一下分页</p></blockquote><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><blockquote><p>  两行文本，看看效果</p></blockquote><a id="more"></a><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最大间隙问题</title>
      <link href="/2019/07/15/Mark-s-Blog/"/>
      <url>/2019/07/15/Mark-s-Blog/</url>
      
        <content type="html"><![CDATA[<h2 id="最大间隙问题"><a href="#最大间隙问题" class="headerlink" title="最大间隙问题"></a>最大间隙问题</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><blockquote><p>   给定n个实数x1,x2,…,xn,求这n个数在实轴相邻2个数之间的最大差值。假设对任何实数的下取整函数耗时O(1)，设计解最大间隙问题的线性时间算法。</p></blockquote><a id="more"></a><h3 id="算法设计："><a href="#算法设计：" class="headerlink" title="算法设计："></a>算法设计：</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于给定的n个实数<span class="keyword">x</span><span class="number">1</span>,<span class="keyword">x</span><span class="number">2</span>,...,xn，计算他们的最大间隙。</span><br></pre></td></tr></table></figure><h3 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h3> <figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入数据由文件名为input.txt的文本文件提供。文件的第一行有<span class="number">1</span>个正整数<span class="built_in">n</span>。接下来的接下来的<span class="number">1</span>行中有<span class="built_in">n</span>个实数<span class="symbol">x1</span>,<span class="symbol">x2</span>,...,xn。</span><br></pre></td></tr></table></figure><h3 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h3> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将找到的最大间隙输出</span><br><span class="line"></span><br><span class="line">                输入文件示例                输出文件示例</span><br><span class="line">                <span class="selector-tag">input</span><span class="selector-class">.txt</span>                  <span class="selector-tag">output</span><span class="selector-class">.txt</span></span><br><span class="line">                5                          3<span class="selector-class">.2</span></span><br><span class="line">                2<span class="selector-class">.3</span> 3<span class="selector-class">.1</span> 7<span class="selector-class">.5</span> 1<span class="selector-class">.5</span> 6<span class="selector-class">.3</span></span><br></pre></td></tr></table></figure><h3 id="分析与解答："><a href="#分析与解答：" class="headerlink" title="分析与解答："></a>分析与解答：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用鸽舍原理设计最大间隙问题的线性时间算法如下。</span><br></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> maxgap(<span class="keyword">int</span> n,<span class="keyword">double</span> *x) &#123;</span><br><span class="line">    <span class="keyword">double</span> minx = x[mini(n,x)],maxx = x[maxi(n,x)];</span><br><span class="line">    <span class="comment">/* 用n-2个等间距的点分割区间[minx,maxx],产生n-1个桶，每个桶i中用high[i]和low[i]分别存储分配给桶i的数中的最大数和最小数 */</span></span><br><span class="line">    <span class="keyword">int</span> *<span class="keyword">count</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">double</span> *low = <span class="keyword">new</span> <span class="keyword">double</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">double</span> *high = <span class="keyword">new</span> <span class="keyword">double</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//桶初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">count</span>[i] = <span class="number">0</span>;</span><br><span class="line">        low[i] = maxx;</span><br><span class="line">        high[i] = minx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将n个数置于n-1个桶中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> bucket = <span class="keyword">int</span>((n<span class="number">-1</span>) * (x[i] - minx) / (maxx - minx)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">count</span>[bucket] ++;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &lt; low[bucket] &lt; low[bucket])</span><br><span class="line">            low[bucket] = x[i];</span><br><span class="line">        <span class="keyword">if</span> (x[i] &gt; high[bucket])</span><br><span class="line">            high[bucket] = x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 此时，除了maxx和minx外的n-2个数被置于n-1个桶中，由鸽舍原理可知，至少有一个桶是空的，这意味着最大间隙不会出现在同一个桶中的两个数之间，对每一个桶做一次线性扫描即可找出最大间隙 */</span></span><br><span class="line">    <span class="keyword">double</span> tmp = <span class="number">0</span>,left = high[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">count</span>[i]) &#123;</span><br><span class="line">            <span class="keyword">double</span> thisgap = low[i] - left;</span><br><span class="line">            <span class="keyword">if</span> (thisgap &gt; tmp)</span><br><span class="line">                tmp = thisgap;</span><br><span class="line">            left = high[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其中，mini和maxi分别计算数组中最小元素和最大元素的下标。</span><br></pre></td></tr></table></figure><hr><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">int mini(int n,T *x) &#123;</span><br><span class="line">    T = tmp = x[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">1</span>,k = <span class="number">1</span>; <span class="built_in">i</span> &lt;= n; <span class="built_in">i</span> ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[<span class="built_in">i</span>] &lt; tmp) &#123;</span><br><span class="line">            tmp = x[<span class="built_in">i</span>];</span><br><span class="line">            k = <span class="built_in">i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line">template&lt;class T&gt;</span><br><span class="line">int maxi(int n,T *x) &#123;</span><br><span class="line">    T tmp = x[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">1</span>,k = <span class="number">1</span>; <span class="built_in">i</span> &lt;= n; <span class="built_in">i</span> ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[<span class="built_in">i</span>] &gt; tmp) &#123;</span><br><span class="line">            tmp = x[<span class="built_in">i</span>];</span><br><span class="line">            k = <span class="built_in">i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于下取整函数耗时O<span class="comment">(1)</span>，故循环体内的运算耗时O<span class="comment">(1)</span>。因此，整个算法耗时O<span class="comment">(n)</span>。即算法maxgap是求最大间隙问题的线性时间算法。注意到在代数判定树计算模型下，Ω<span class="comment">(nlogn)</span>是最大间隙问题的一个计算时间下界。这意味着在代数判定树的计算模型下，最大间隙问题是不可能有线性时间算法的。在此题中假设下取整函数耗时O<span class="comment">(1)</span>，实际上这可以看作是在代数判定树模型中，将下取整运算作为基本运算增加到原有的基本运算集中，从而使代数判定树计算模型的计算能力得到增强。因而可以在线性时间内解最大间隙问题。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
