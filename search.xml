<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>One algorithm question per day</title>
      <link href="/2019/07/16/algorithm/"/>
      <url>/2019/07/16/algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a><center>Introduction</center></h2><blockquote><p>  This blog is mainly used to record the process of learning algorithms in depth. The main programming languages are C, C++, Java, welcome to communicate actively, and my contact information on the right.</p></blockquote><a id="more"></a><h2 id="1-递归、分治"><a href="#1-递归、分治" class="headerlink" title="1. 递归、分治"></a><center>1. 递归、分治</center></h2><h3 id="1-1-字典序问题"><a href="#1-1-字典序问题" class="headerlink" title="1.1 字典序问题"></a>1.1 字典序问题</h3><h4 id="1-1-1-问题描述"><a href="#1-1-1-问题描述" class="headerlink" title="1.1.1 问题描述"></a>1.1.1 问题描述</h4><blockquote><p>在数据加密和数据压缩中常需要对特殊的字符串进行编码。给定的字母表A由26个小写字母组成A={a,b,…,z}。该字母表产生的升序字符串是指字符串中字母从左到右出现的次序与字母在字母表中出现的次序相同，且每个字符最多出现1次。例如，a,b,ab,bc,xyz等字符串都是升序字符串。现在对字母表A产生的所有长度不超过6的升序字符串按照字典序排列并编码如下。</p></blockquote><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">…</th><th align="center">26</th><th align="center">27</th><th align="center">28</th><th align="center">…</th></tr></thead><tbody><tr><td align="center">a</td><td align="center">b</td><td align="center">…</td><td align="center">z</td><td align="center">ab</td><td align="center">ac</td><td align="center">…</td></tr></tbody></table><blockquote><p>  对于任意长度不超过6的升序字符串，迅速计算出它在上述字典中的编码。</p></blockquote><h4 id="1-1-2-数据输入"><a href="#1-1-2-数据输入" class="headerlink" title="1.1.2 数据输入"></a>1.1.2 数据输入</h4><blockquote><p>  输入数据由文件名为input.txt的文本文件提供。文件的第1行是一个正整数k，表示接下来有k行。在接下来的k行中，每行给出一个字符串。<br>  输入文件示例<br>  input.txt<br>  2<br>  a<br>  b</p></blockquote><h4 id="1-1-3-数据输出"><a href="#1-1-3-数据输出" class="headerlink" title="1.1.3 数据输出"></a>1.1.3 数据输出</h4><blockquote><p>  将计算结果输出到文件output.txt中。文件共有k行，每行对应于一个字符串的编码。<br>  输出文件示例<br>  output.txt<br>  1<br>  2</p></blockquote><h4 id="1-1-4-示例代码"><a href="#1-1-4-示例代码" class="headerlink" title="1.1.4 示例代码"></a>1.1.4 示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictionarySequence</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"dictionary_input.txt"</span>));</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"dictionary_output.txt"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = Integer.parseInt(br.readLine());<span class="comment">//获取文件首行提供的行数</span></span><br><span class="line">String str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">char</span> [] s = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= count; row ++) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">str = br.readLine();</span><br><span class="line">s = str.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.length &gt; <span class="number">6</span>) &#123;</span><br><span class="line">bw.write(str + <span class="string">" 的长度大于6，在此不进行字典序编码。"</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*统计长度小于str的长度的升序字符串个数*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length; i ++)</span><br><span class="line">sum += count_allk(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h = s[<span class="number">0</span>] - <span class="string">'a'</span> + <span class="number">1</span>; <span class="comment">//获取s中第一个字母</span></span><br><span class="line"><span class="comment">/*统计所有首字母小于s首字母的升序字符串个数*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; h; i ++)</span><br><span class="line">sum += count_iandk(i,s.length);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,temp = h; i &lt; s.length; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> n = s[i] - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> length = s.length - i;<span class="comment">//获取此时的长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = temp + <span class="number">1</span>; j &lt; n; j ++)</span><br><span class="line">sum += count_iandk(j,length);</span><br><span class="line">temp = n;</span><br><span class="line">&#125;</span><br><span class="line">bw.write(str + <span class="string">"-----&gt;"</span> + (sum + <span class="number">1</span>));</span><br><span class="line">bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i :字符串以第i个字符开头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k :字符串长度为k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 以i开头长度为k的升序字符串的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count_iandk</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">26</span>; j ++)</span><br><span class="line">sum += count_iandk(j,k - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k字符串长度为k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>长度为k的升序字符串的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count_allk</span> <span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i ++) &#123;</span><br><span class="line">sum += count_iandk(i,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-5-运行结果"><a href="#1-1-5-运行结果" class="headerlink" title="1.1.5 运行结果"></a>1.1.5 运行结果</h4><blockquote><p>  输入文件<br><img src="/img/algorithm/dicSeq_input.bmp" alt="input"><br>  输出文件<br><img src="/img/algorithm/dicSeq_output.bmp" alt="output"></p></blockquote><hr><h2 id="2-贪心算法"><a href="#2-贪心算法" class="headerlink" title="2. 贪心算法"></a><center>2. 贪心算法</center></h2><h2 id="3-动态规划"><a href="#3-动态规划" class="headerlink" title="3. 动态规划"></a><center>3. 动态规划</center></h2><h2 id="4-回溯法"><a href="#4-回溯法" class="headerlink" title="4. 回溯法"></a><center>4. 回溯法</center></h2><h2 id="5-分支限界法"><a href="#5-分支限界法" class="headerlink" title="5. 分支限界法"></a><center>5. 分支限界法</center></h2><h2 id="6-随机化算法"><a href="#6-随机化算法" class="headerlink" title="6. 随机化算法"></a><center>6. 随机化算法</center></h2><h2 id="7-线性规划与网络流"><a href="#7-线性规划与网络流" class="headerlink" title="7. 线性规划与网络流"></a><center>7. 线性规划与网络流</center></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记&lt;持续更新中&gt;</title>
      <link href="/2019/07/16/spring/"/>
      <url>/2019/07/16/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring学习路线"><a href="#1-Spring学习路线" class="headerlink" title="1. Spring学习路线"></a><center>1. Spring学习路线</center></h1><blockquote><h3 id="1-Spring的概述、Spring-IOC-xml-、Spring的Bean管理、Spring属性注入"><a href="#1-Spring的概述、Spring-IOC-xml-、Spring的Bean管理、Spring属性注入" class="headerlink" title="1. Spring的概述、Spring IOC(xml)、Spring的Bean管理、Spring属性注入"></a>1. Spring的概述、Spring IOC(xml)、Spring的Bean管理、Spring属性注入</h3><h3 id="2-Spring-IOC的注解方式、Spring-AOP-xml"><a href="#2-Spring-IOC的注解方式、Spring-AOP-xml" class="headerlink" title="2. Spring IOC的注解方式、Spring AOP(xml)"></a>2. Spring IOC的注解方式、Spring AOP(xml)</h3><h3 id="3-Spring-AOP的注解开发、Spring事务、JdbcTemplate"><a href="#3-Spring-AOP的注解开发、Spring事务、JdbcTemplate" class="headerlink" title="3. Spring AOP的注解开发、Spring事务、JdbcTemplate"></a>3. Spring AOP的注解开发、Spring事务、JdbcTemplate</h3></blockquote><a id="more"></a><h2 id="1-1-Spring的概述"><a href="#1-1-Spring的概述" class="headerlink" title="1.1. Spring的概述"></a>1.1. Spring的概述</h2><h3 id="1-1-1-什么是Spring"><a href="#1-1-1-什么是Spring" class="headerlink" title="1.1.1. 什么是Spring"></a>1.1.1. 什么是Spring</h3><blockquote><p>先来看看百度百科给出的解释</p></blockquote><p><img src="/img/springDesc.png" alt="spring简介"></p><blockquote><p>简单总结一下<br>  Spring:SE/EE开发的<strong>一站式</strong>框架<br>  Spring具有EE开发的每一层的解决方案<br>  &emsp;&emsp;Web层：SpringMVC<br>  &emsp;&emsp;Service层：Spring的Bean管理、Spring的事务<br>  &emsp;&emsp;Dao层：Spring的Jdbc模板、Spring的ORM模块</p></blockquote><hr><h3 id="1-1-2-Spring的优点"><a href="#1-1-2-Spring的优点" class="headerlink" title="1.1.2. Spring的优点"></a>1.1.2. Spring的优点</h3><blockquote><ol><li>Java EE更加容易使用</li><li>面向对象的设计比任何实现技术(比如Java EE)都重要</li><li>面向接口编程，而不是针对类编程。Spring将使用接口的复杂度降低到零。（面向接口编程有哪些复杂度？）</li><li>代码应该易于测试。Spring框架会帮助你，使代码的测试更加简单</li><li>JavaBean提供了应用程序配置的最好方法</li><li>在Java中，已检查异常（Checked exception）被过度使用。框架不应该迫使你捕获不能恢复的异常</li></ol></blockquote><h2 id="1-2-Spring-IOC-xml"><a href="#1-2-Spring-IOC-xml" class="headerlink" title="1.2. Spring IOC(xml)"></a>1.2. Spring IOC(xml)</h2><h3 id="1-2-1-什么是IOC"><a href="#1-2-1-什么是IOC" class="headerlink" title="1.2.1. 什么是IOC?"></a>1.2.1. 什么是IOC?</h3><blockquote><p>  IOC:Inversion of control 控制反转 <br>简单来说，就是将对象的创建权“反转”给Spring，即让Spring进行对象(也就是Bean)的管理</p></blockquote><h3 id="1-2-2-IOC的底层原理简介"><a href="#1-2-2-IOC的底层原理简介" class="headerlink" title="1.2.2. IOC的底层原理简介"></a>1.2.2. IOC的底层原理简介</h3><p><img src="/img/IOC.bmp" alt="IOC"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最大间隙问题</title>
      <link href="/2019/07/15/Maxgap/"/>
      <url>/2019/07/15/Maxgap/</url>
      
        <content type="html"><![CDATA[<h2 id="最大间隙问题"><a href="#最大间隙问题" class="headerlink" title="最大间隙问题"></a>最大间隙问题</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><blockquote><p>   给定n个实数x1,x2,…,xn,求这n个数在实轴相邻2个数之间的最大差值。假设对任何实数的下取整函数耗时O(1)，设计解最大间隙问题的线性时间算法。</p></blockquote><a id="more"></a><h3 id="算法设计："><a href="#算法设计：" class="headerlink" title="算法设计："></a>算法设计：</h3><blockquote><p>   对于给定的n个实数x1,x2,…,xn，计算他们的最大间隙。</p></blockquote><h3 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h3><blockquote><p>  输入数据由文件名为input.txt的文本文件提供。文件的第一行有1个正整数n。接下来的接下来的1行中有n个实数x1,x2,…,xn。</p></blockquote><blockquote><p>   输入文件示例<br>   input.txt<br>   5<br>   2.3 3.1 7.5 1.5 6.3</p></blockquote><h3 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h3><blockquote><p>  将找到的最大间隙输出</p></blockquote><blockquote><p>  输出文件示例<br>  output.txt<br>  3.2</p></blockquote><h3 id="分析与解答："><a href="#分析与解答：" class="headerlink" title="分析与解答："></a>分析与解答：</h3><blockquote><p>   用鸽舍原理设计最大间隙问题的线性时间算法如下。</p></blockquote><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> maxgap(<span class="keyword">int</span> n,<span class="keyword">double</span> *x) &#123;</span><br><span class="line">    <span class="keyword">double</span> minx = x[mini(n,x)],maxx = x[maxi(n,x)];</span><br><span class="line">    <span class="comment">/* 用n-2个等间距的点分割区间[minx,maxx],产生n-1个桶，每个桶i中用high[i]和low[i]分别存储分配给桶i的数中的最大数和最小数 */</span></span><br><span class="line">    <span class="keyword">int</span> *<span class="keyword">count</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">double</span> *low = <span class="keyword">new</span> <span class="keyword">double</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">double</span> *high = <span class="keyword">new</span> <span class="keyword">double</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//桶初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">count</span>[i] = <span class="number">0</span>;</span><br><span class="line">        low[i] = maxx;</span><br><span class="line">        high[i] = minx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将n个数置于n-1个桶中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> bucket = <span class="keyword">int</span>((n<span class="number">-1</span>) * (x[i] - minx) / (maxx - minx)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">count</span>[bucket] ++;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &lt; low[bucket] &lt; low[bucket])</span><br><span class="line">            low[bucket] = x[i];</span><br><span class="line">        <span class="keyword">if</span> (x[i] &gt; high[bucket])</span><br><span class="line">            high[bucket] = x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 此时，除了maxx和minx外的n-2个数被置于n-1个桶中，由鸽舍原理可知，至少有一个桶是空的，这意味着最大间隙不会出现在同一个桶中的两个数之间，对每一个桶做一次线性扫描即可找出最大间隙 */</span></span><br><span class="line">    <span class="keyword">double</span> tmp = <span class="number">0</span>,left = high[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">count</span>[i]) &#123;</span><br><span class="line">            <span class="keyword">double</span> thisgap = low[i] - left;</span><br><span class="line">            <span class="keyword">if</span> (thisgap &gt; tmp)</span><br><span class="line">                tmp = thisgap;</span><br><span class="line">            left = high[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>   其中，mini和maxi分别计算数组中最小元素和最大元素的下标。</p></blockquote><hr><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">int mini(int n,T *x) &#123;</span><br><span class="line">    T = tmp = x[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">1</span>,k = <span class="number">1</span>; <span class="built_in">i</span> &lt;= n; <span class="built_in">i</span> ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[<span class="built_in">i</span>] &lt; tmp) &#123;</span><br><span class="line">            tmp = x[<span class="built_in">i</span>];</span><br><span class="line">            k = <span class="built_in">i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line">template&lt;class T&gt;</span><br><span class="line">int maxi(int n,T *x) &#123;</span><br><span class="line">    T tmp = x[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">1</span>,k = <span class="number">1</span>; <span class="built_in">i</span> &lt;= n; <span class="built_in">i</span> ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[<span class="built_in">i</span>] &gt; tmp) &#123;</span><br><span class="line">            tmp = x[<span class="built_in">i</span>];</span><br><span class="line">            k = <span class="built_in">i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>   由于下取整函数耗时O(1)，故循环体内的运算耗时O(1)。因此，整个算法耗时O(n)。即算法maxgap是求最大间隙问题的线性时间算法。注意到在代数判定树计算模型下，Ω(nlogn)是最大间隙问题的一个计算时间下界。这意味着在代数判定树的计算模型下，最大间隙问题是不可能有线性时间算法的。在此题中假设下取整函数耗时O(1)，实际上这可以看作是在代数判定树模型中，将下取整运算作为基本运算增加到原有的基本运算集中，从而使代数判定树计算模型的计算能力得到增强。因而可以在线性时间内解最大间隙问题。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
